// Generated by gencpp from file custom_msgs/telemetry.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_TELEMETRY_H
#define CUSTOM_MSGS_MESSAGE_TELEMETRY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct telemetry_
{
  typedef telemetry_<ContainerAllocator> Type;

  telemetry_()
    : timestamp(0)
    , imu_gyro_x(0)
    , imu_gyro_y(0)
    , imu_gyro_z(0)
    , imu_gyro_compass_x(0)
    , imu_gyro_compass_y(0)
    , imu_gyro_compass_z(0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , q4(0.0)
    , rollspeed(0.0)
    , pitchspeed(0.0)
    , yawspeed(0.0)
    , internal_pressure(0.0)
    , external_pressure(0.0)
    , heading(0)  {
    }
  telemetry_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , imu_gyro_x(0)
    , imu_gyro_y(0)
    , imu_gyro_z(0)
    , imu_gyro_compass_x(0)
    , imu_gyro_compass_y(0)
    , imu_gyro_compass_z(0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , q4(0.0)
    , rollspeed(0.0)
    , pitchspeed(0.0)
    , yawspeed(0.0)
    , internal_pressure(0.0)
    , external_pressure(0.0)
    , heading(0)  {
  (void)_alloc;
    }



   typedef int32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _imu_gyro_x_type;
  _imu_gyro_x_type imu_gyro_x;

   typedef int32_t _imu_gyro_y_type;
  _imu_gyro_y_type imu_gyro_y;

   typedef int32_t _imu_gyro_z_type;
  _imu_gyro_z_type imu_gyro_z;

   typedef int32_t _imu_gyro_compass_x_type;
  _imu_gyro_compass_x_type imu_gyro_compass_x;

   typedef int32_t _imu_gyro_compass_y_type;
  _imu_gyro_compass_y_type imu_gyro_compass_y;

   typedef int32_t _imu_gyro_compass_z_type;
  _imu_gyro_compass_z_type imu_gyro_compass_z;

   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;

   typedef float _q4_type;
  _q4_type q4;

   typedef float _rollspeed_type;
  _rollspeed_type rollspeed;

   typedef float _pitchspeed_type;
  _pitchspeed_type pitchspeed;

   typedef float _yawspeed_type;
  _yawspeed_type yawspeed;

   typedef float _internal_pressure_type;
  _internal_pressure_type internal_pressure;

   typedef float _external_pressure_type;
  _external_pressure_type external_pressure;

   typedef int32_t _heading_type;
  _heading_type heading;





  typedef boost::shared_ptr< ::custom_msgs::telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct telemetry_

typedef ::custom_msgs::telemetry_<std::allocator<void> > telemetry;

typedef boost::shared_ptr< ::custom_msgs::telemetry > telemetryPtr;
typedef boost::shared_ptr< ::custom_msgs::telemetry const> telemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::telemetry_<ContainerAllocator1> & lhs, const ::custom_msgs::telemetry_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.imu_gyro_x == rhs.imu_gyro_x &&
    lhs.imu_gyro_y == rhs.imu_gyro_y &&
    lhs.imu_gyro_z == rhs.imu_gyro_z &&
    lhs.imu_gyro_compass_x == rhs.imu_gyro_compass_x &&
    lhs.imu_gyro_compass_y == rhs.imu_gyro_compass_y &&
    lhs.imu_gyro_compass_z == rhs.imu_gyro_compass_z &&
    lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3 &&
    lhs.q4 == rhs.q4 &&
    lhs.rollspeed == rhs.rollspeed &&
    lhs.pitchspeed == rhs.pitchspeed &&
    lhs.yawspeed == rhs.yawspeed &&
    lhs.internal_pressure == rhs.internal_pressure &&
    lhs.external_pressure == rhs.external_pressure &&
    lhs.heading == rhs.heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::telemetry_<ContainerAllocator1> & lhs, const ::custom_msgs::telemetry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::telemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "287f88c9716cc47a884bba700bcc2292";
  }

  static const char* value(const ::custom_msgs::telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x287f88c9716cc47aULL;
  static const uint64_t static_value2 = 0x884bba700bcc2292ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/telemetry";
  }

  static const char* value(const ::custom_msgs::telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 timestamp\n"
"\n"
"int32 imu_gyro_x\n"
"int32 imu_gyro_y\n"
"int32 imu_gyro_z\n"
"\n"
"\n"
"\n"
"int32 imu_gyro_compass_x\n"
"int32 imu_gyro_compass_y\n"
"int32 imu_gyro_compass_z\n"
"\n"
"\n"
"float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q4\n"
"float32 rollspeed\n"
"float32 pitchspeed\n"
"float32 yawspeed\n"
"\n"
"\n"
"\n"
"float32 internal_pressure\n"
"float32 external_pressure\n"
"int32 heading\n"
;
  }

  static const char* value(const ::custom_msgs::telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.imu_gyro_x);
      stream.next(m.imu_gyro_y);
      stream.next(m.imu_gyro_z);
      stream.next(m.imu_gyro_compass_x);
      stream.next(m.imu_gyro_compass_y);
      stream.next(m.imu_gyro_compass_z);
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.q4);
      stream.next(m.rollspeed);
      stream.next(m.pitchspeed);
      stream.next(m.yawspeed);
      stream.next(m.internal_pressure);
      stream.next(m.external_pressure);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::telemetry_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "imu_gyro_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imu_gyro_x);
    s << indent << "imu_gyro_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imu_gyro_y);
    s << indent << "imu_gyro_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imu_gyro_z);
    s << indent << "imu_gyro_compass_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imu_gyro_compass_x);
    s << indent << "imu_gyro_compass_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imu_gyro_compass_y);
    s << indent << "imu_gyro_compass_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.imu_gyro_compass_z);
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
    s << indent << "q4: ";
    Printer<float>::stream(s, indent + "  ", v.q4);
    s << indent << "rollspeed: ";
    Printer<float>::stream(s, indent + "  ", v.rollspeed);
    s << indent << "pitchspeed: ";
    Printer<float>::stream(s, indent + "  ", v.pitchspeed);
    s << indent << "yawspeed: ";
    Printer<float>::stream(s, indent + "  ", v.yawspeed);
    s << indent << "internal_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.internal_pressure);
    s << indent << "external_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.external_pressure);
    s << indent << "heading: ";
    Printer<int32_t>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_TELEMETRY_H
