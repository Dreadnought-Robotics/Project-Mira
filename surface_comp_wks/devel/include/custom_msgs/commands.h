// Generated by gencpp from file custom_msgs/commands.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_COMMANDS_H
#define CUSTOM_MSGS_MESSAGE_COMMANDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct commands_
{
  typedef commands_<ContainerAllocator> Type;

  commands_()
    : arm(false)
    , mode()
    , forward(0)
    , lateral(0)
    , thrust(0)
    , pitch(0)
    , roll(0)
    , yaw(0)
    , servo1(0)
    , servo2(0)  {
    }
  commands_(const ContainerAllocator& _alloc)
    : arm(false)
    , mode(_alloc)
    , forward(0)
    , lateral(0)
    , thrust(0)
    , pitch(0)
    , roll(0)
    , yaw(0)
    , servo1(0)
    , servo2(0)  {
  (void)_alloc;
    }



   typedef uint8_t _arm_type;
  _arm_type arm;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef int16_t _forward_type;
  _forward_type forward;

   typedef int16_t _lateral_type;
  _lateral_type lateral;

   typedef int16_t _thrust_type;
  _thrust_type thrust;

   typedef int16_t _pitch_type;
  _pitch_type pitch;

   typedef int16_t _roll_type;
  _roll_type roll;

   typedef int16_t _yaw_type;
  _yaw_type yaw;

   typedef int16_t _servo1_type;
  _servo1_type servo1;

   typedef int16_t _servo2_type;
  _servo2_type servo2;





  typedef boost::shared_ptr< ::custom_msgs::commands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::commands_<ContainerAllocator> const> ConstPtr;

}; // struct commands_

typedef ::custom_msgs::commands_<std::allocator<void> > commands;

typedef boost::shared_ptr< ::custom_msgs::commands > commandsPtr;
typedef boost::shared_ptr< ::custom_msgs::commands const> commandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::commands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::commands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::commands_<ContainerAllocator1> & lhs, const ::custom_msgs::commands_<ContainerAllocator2> & rhs)
{
  return lhs.arm == rhs.arm &&
    lhs.mode == rhs.mode &&
    lhs.forward == rhs.forward &&
    lhs.lateral == rhs.lateral &&
    lhs.thrust == rhs.thrust &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw &&
    lhs.servo1 == rhs.servo1 &&
    lhs.servo2 == rhs.servo2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::commands_<ContainerAllocator1> & lhs, const ::custom_msgs::commands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::commands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::commands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::commands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::commands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd03263c66e74cb889ba23a832fbae12";
  }

  static const char* value(const ::custom_msgs::commands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd03263c66e74cb8ULL;
  static const uint64_t static_value2 = 0x89ba23a832fbae12ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/commands";
  }

  static const char* value(const ::custom_msgs::commands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool arm\n"
"string mode\n"
"int16 forward\n"
"int16 lateral\n"
"int16 thrust\n"
"int16 pitch\n"
"int16 roll\n"
"int16 yaw\n"
"int16 servo1\n"
"int16 servo2\n"
;
  }

  static const char* value(const ::custom_msgs::commands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::commands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm);
      stream.next(m.mode);
      stream.next(m.forward);
      stream.next(m.lateral);
      stream.next(m.thrust);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.servo1);
      stream.next(m.servo2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct commands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::commands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::commands_<ContainerAllocator>& v)
  {
    s << indent << "arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    s << indent << "forward: ";
    Printer<int16_t>::stream(s, indent + "  ", v.forward);
    s << indent << "lateral: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lateral);
    s << indent << "thrust: ";
    Printer<int16_t>::stream(s, indent + "  ", v.thrust);
    s << indent << "pitch: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "servo1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo1);
    s << indent << "servo2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_COMMANDS_H
