# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/telemetry.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class telemetry(genpy.Message):
  _md5sum = "287f88c9716cc47a884bba700bcc2292"
  _type = "custom_msgs/telemetry"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 timestamp

int32 imu_gyro_x
int32 imu_gyro_y
int32 imu_gyro_z



int32 imu_gyro_compass_x
int32 imu_gyro_compass_y
int32 imu_gyro_compass_z


float32 q1
float32 q2
float32 q3
float32 q4
float32 rollspeed
float32 pitchspeed
float32 yawspeed



float32 internal_pressure
float32 external_pressure
int32 heading"""
  __slots__ = ['timestamp','imu_gyro_x','imu_gyro_y','imu_gyro_z','imu_gyro_compass_x','imu_gyro_compass_y','imu_gyro_compass_z','q1','q2','q3','q4','rollspeed','pitchspeed','yawspeed','internal_pressure','external_pressure','heading']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,imu_gyro_x,imu_gyro_y,imu_gyro_z,imu_gyro_compass_x,imu_gyro_compass_y,imu_gyro_compass_z,q1,q2,q3,q4,rollspeed,pitchspeed,yawspeed,internal_pressure,external_pressure,heading

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(telemetry, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.imu_gyro_x is None:
        self.imu_gyro_x = 0
      if self.imu_gyro_y is None:
        self.imu_gyro_y = 0
      if self.imu_gyro_z is None:
        self.imu_gyro_z = 0
      if self.imu_gyro_compass_x is None:
        self.imu_gyro_compass_x = 0
      if self.imu_gyro_compass_y is None:
        self.imu_gyro_compass_y = 0
      if self.imu_gyro_compass_z is None:
        self.imu_gyro_compass_z = 0
      if self.q1 is None:
        self.q1 = 0.
      if self.q2 is None:
        self.q2 = 0.
      if self.q3 is None:
        self.q3 = 0.
      if self.q4 is None:
        self.q4 = 0.
      if self.rollspeed is None:
        self.rollspeed = 0.
      if self.pitchspeed is None:
        self.pitchspeed = 0.
      if self.yawspeed is None:
        self.yawspeed = 0.
      if self.internal_pressure is None:
        self.internal_pressure = 0.
      if self.external_pressure is None:
        self.external_pressure = 0.
      if self.heading is None:
        self.heading = 0
    else:
      self.timestamp = 0
      self.imu_gyro_x = 0
      self.imu_gyro_y = 0
      self.imu_gyro_z = 0
      self.imu_gyro_compass_x = 0
      self.imu_gyro_compass_y = 0
      self.imu_gyro_compass_z = 0
      self.q1 = 0.
      self.q2 = 0.
      self.q3 = 0.
      self.q4 = 0.
      self.rollspeed = 0.
      self.pitchspeed = 0.
      self.yawspeed = 0.
      self.internal_pressure = 0.
      self.external_pressure = 0.
      self.heading = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i9fi().pack(_x.timestamp, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_gyro_compass_x, _x.imu_gyro_compass_y, _x.imu_gyro_compass_z, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.internal_pressure, _x.external_pressure, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.timestamp, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_gyro_compass_x, _x.imu_gyro_compass_y, _x.imu_gyro_compass_z, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.internal_pressure, _x.external_pressure, _x.heading,) = _get_struct_7i9fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i9fi().pack(_x.timestamp, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_gyro_compass_x, _x.imu_gyro_compass_y, _x.imu_gyro_compass_z, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.internal_pressure, _x.external_pressure, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.timestamp, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_gyro_compass_x, _x.imu_gyro_compass_y, _x.imu_gyro_compass_z, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.internal_pressure, _x.external_pressure, _x.heading,) = _get_struct_7i9fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i9fi = None
def _get_struct_7i9fi():
    global _struct_7i9fi
    if _struct_7i9fi is None:
        _struct_7i9fi = struct.Struct("<7i9fi")
    return _struct_7i9fi
