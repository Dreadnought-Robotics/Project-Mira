# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/commands.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class commands(genpy.Message):
  _md5sum = "fd03263c66e74cb889ba23a832fbae12"
  _type = "custom_msgs/commands"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool arm
string mode
int16 forward
int16 lateral
int16 thrust
int16 pitch
int16 roll
int16 yaw
int16 servo1
int16 servo2"""
  __slots__ = ['arm','mode','forward','lateral','thrust','pitch','roll','yaw','servo1','servo2']
  _slot_types = ['bool','string','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       arm,mode,forward,lateral,thrust,pitch,roll,yaw,servo1,servo2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(commands, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.arm is None:
        self.arm = False
      if self.mode is None:
        self.mode = ''
      if self.forward is None:
        self.forward = 0
      if self.lateral is None:
        self.lateral = 0
      if self.thrust is None:
        self.thrust = 0
      if self.pitch is None:
        self.pitch = 0
      if self.roll is None:
        self.roll = 0
      if self.yaw is None:
        self.yaw = 0
      if self.servo1 is None:
        self.servo1 = 0
      if self.servo2 is None:
        self.servo2 = 0
    else:
      self.arm = False
      self.mode = ''
      self.forward = 0
      self.lateral = 0
      self.thrust = 0
      self.pitch = 0
      self.roll = 0
      self.yaw = 0
      self.servo1 = 0
      self.servo2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.arm
      buff.write(_get_struct_B().pack(_x))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8h().pack(_x.forward, _x.lateral, _x.thrust, _x.pitch, _x.roll, _x.yaw, _x.servo1, _x.servo2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.arm,) = _get_struct_B().unpack(str[start:end])
      self.arm = bool(self.arm)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.forward, _x.lateral, _x.thrust, _x.pitch, _x.roll, _x.yaw, _x.servo1, _x.servo2,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.arm
      buff.write(_get_struct_B().pack(_x))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8h().pack(_x.forward, _x.lateral, _x.thrust, _x.pitch, _x.roll, _x.yaw, _x.servo1, _x.servo2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.arm,) = _get_struct_B().unpack(str[start:end])
      self.arm = bool(self.arm)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.forward, _x.lateral, _x.thrust, _x.pitch, _x.roll, _x.yaw, _x.servo1, _x.servo2,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8h = None
def _get_struct_8h():
    global _struct_8h
    if _struct_8h is None:
        _struct_8h = struct.Struct("<8h")
    return _struct_8h
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
